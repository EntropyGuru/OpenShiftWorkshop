{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "infraInstanceCount": {
            "defaultValue": 3,
            "allowedValues": [
                1,
                2,
                3
            ],
            "type": "Int",
            "metadata": {
                "description": "Number of OpenShift infra nodes."
            }
        },
        "enableLogging": {
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ],
            "type": "String",
            "metadata": {
                "description": "Enable OpenShift Logging: true or false"
            }
        },
        "openshiftPassword": {
            "minLength": 1,
            "type": "SecureString",
            "metadata": {
                "description": "Password for OpenShift user to login to OpenShift Console"
            }
        },
        "openshiftClusterPrefix": {
            "defaultValue": "mycluster",
            "minLength": 2,
            "maxLength": 20,
            "type": "String",
            "metadata": {
                "description": "OpenShift cluster prefix.  Used to generate master, infra and node hostnames.  Maximum of 20 characters."
            }
        },
        "nodeInstanceCount": {
            "defaultValue": 2,
            "allowedValues": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30
            ],
            "type": "Int",
            "metadata": {
                "description": "Number of OpenShift nodes"
            }
        },
        "_artifactsLocation": {
            "defaultValue": "https://raw.githubusercontent.com/Microsoft/openshift-origin/master",
            "type": "String",
            "metadata": {
                "description": "The base URL where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated.",
                "artifactsBaseUrl": ""
            }
        },
        "dataDiskSize": {
            "defaultValue": 64,
            "allowedValues": [
                32,
                64,
                128,
                256,
                512,
                1024,
                2048
            ],
            "type": "Int",
            "metadata": {
                "description": "Size of Datadisk in GB for Docker volume"
            }
        },
        "keyVaultName": {
            "minLength": 1,
            "type": "String",
            "metadata": {
                "description": "Name of the Key Vault"
            }
        },
        "nodeVmSize": {
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_D1_v2",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_DS1_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5",
                "Standard_D2_v3",
                "Standard_D4_v3",
                "Standard_D8_v3",
                "Standard_D16_v3",
                "Standard_D32_v3",
                "Standard_D64_v3",
                "Standard_D2s_v3",
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3",
                "Standard_D64s_v3",
                "Standard_E2_v3",
                "Standard_E4_v3",
                "Standard_E8_v3",
                "Standard_E16_v3",
                "Standard_E32_v3",
                "Standard_E64_v3",
                "Standard_E2s_v3",
                "Standard_E4s_v3",
                "Standard_E8s_v3",
                "Standard_E16s_v3",
                "Standard_E32s_v3",
                "Standard_E64s_v3"
            ],
            "type": "String",
            "metadata": {
                "description": "OpenShift Node VM(s) size"
            }
        },
        "aadClientSecret": {
            "defaultValue": "",
            "type": "SecureString",
            "metadata": {
                "description": "Azure AD Client Secret"
            }
        },
        "enableMetrics": {
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ],
            "type": "String",
            "metadata": {
                "description": "Enable OpenShift Metrics: true or false"
            }
        },
        "defaultSubDomain": {
            "defaultValue": "contoso.com",
            "type": "String",
            "metadata": {
                "description": "Default Subdomain for application routing (Wildcard DNS) - must enter something even if you are using nip.io"
            }
        },
        "aadClientId": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Azure AD Client ID"
            }
        },
        "storageKind": {
            "defaultValue": "managed",
            "allowedValues": [
                "managed",
                "unmanaged"
            ],
            "type": "String",
            "metadata": {
                "description": "Use Managed or Unmanaged Disks"
            }
        },
        "keyVaultSecret": {
            "minLength": 1,
            "type": "String",
            "metadata": {
                "description": "Key Vault Secret Name that contains the Private Key"
            }
        },
        "adminUsername": {
            "defaultValue": "clusteradmin",
            "minLength": 1,
            "type": "String",
            "metadata": {
                "description": "Administrator username on all VMs and first user created for OpenShift login"
            }
        },
        "enableAzure": {
            "defaultValue": "true",
            "allowedValues": [
                "true",
                "false"
            ],
            "type": "String",
            "metadata": {
                "description": "Enable Azure as Cloud Provider - true or false"
            }
        },
        "keyVaultResourceGroup": {
            "minLength": 1,
            "type": "String",
            "metadata": {
                "description": "Resource Group that contains the Key Vault"
            }
        },
        "masterVmSize": {
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_D1_v2",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_DS1_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5",
                "Standard_D2_v3",
                "Standard_D4_v3",
                "Standard_D8_v3",
                "Standard_D16_v3",
                "Standard_D32_v3",
                "Standard_D64_v3",
                "Standard_D2s_v3",
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3",
                "Standard_D64s_v3",
                "Standard_E2_v3",
                "Standard_E4_v3",
                "Standard_E8_v3",
                "Standard_E16_v3",
                "Standard_E32_v3",
                "Standard_E64_v3",
                "Standard_E2s_v3",
                "Standard_E4s_v3",
                "Standard_E8s_v3",
                "Standard_E16s_v3",
                "Standard_E32s_v3",
                "Standard_E64s_v3"
            ],
            "type": "String",
            "metadata": {
                "description": "OpenShift Master VM size"
            }
        },
        "sshPublicKey": {
            "type": "String",
            "metadata": {
                "description": "SSH public key for all VMs"
            }
        },
        "masterInstanceCount": {
            "defaultValue": 3,
            "allowedValues": [
                1,
                3,
                5
            ],
            "type": "Int",
            "metadata": {
                "description": "Number of OpenShift masters."
            }
        },
        "defaultSubDomainType": {
            "defaultValue": "nipio",
            "allowedValues": [
                "nipio",
                "custom"
            ],
            "type": "String",
            "metadata": {
                "description": "Default Subdomain type - nip.io or custom (defined in next parameter)"
            }
        },
        "infraVmSize": {
            "defaultValue": "Standard_DS3_v2",
            "allowedValues": [
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_D1_v2",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS11",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14",
                "Standard_DS1_v2",
                "Standard_DS2_v2",
                "Standard_DS3_v2",
                "Standard_DS4_v2",
                "Standard_DS5_v2",
                "Standard_DS11_v2",
                "Standard_DS12_v2",
                "Standard_DS13_v2",
                "Standard_DS14_v2",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5",
                "Standard_D2_v3",
                "Standard_D4_v3",
                "Standard_D8_v3",
                "Standard_D16_v3",
                "Standard_D32_v3",
                "Standard_D64_v3",
                "Standard_D2s_v3",
                "Standard_D4s_v3",
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3",
                "Standard_D64s_v3",
                "Standard_E2_v3",
                "Standard_E4_v3",
                "Standard_E8_v3",
                "Standard_E16_v3",
                "Standard_E32_v3",
                "Standard_E64_v3",
                "Standard_E2s_v3",
                "Standard_E4s_v3",
                "Standard_E8s_v3",
                "Standard_E16s_v3",
                "Standard_E32s_v3",
                "Standard_E64s_v3"
            ],
            "type": "String",
            "metadata": {
                "description": "OpenShift Infra Node VM(s) size"
            }
        }
    },
    "variables": {
        "availabilitySetSku": "[concat(parameters('storageKind'), 'AvailabilitySetSku')]",
        "masterLbBackendPoolId": "[concat(variables('masterLbId'),'/backendAddressPools/loadBalancerBackend')]",
        "infraLbHttpProbeId": "[concat(variables('infraLbId'),'/probes/httpProbe')]",
        "newStorageAccountMaster": "[concat('master', uniqueString(concat(resourceGroup().id, 'msa')))]",
        "apiVersionStorage": "2017-06-01",
        "apiVersionCompute": "2017-03-30",
        "apiVersionNetwork": "2017-09-01",
        "masterLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('masterLoadBalancerName'))]",
        "openshiftMasterHostname": "[concat(variables('namingInfix'), '-master')]",
        "resourceGroupName": "[resourceGroup().id]",
        "unmanagedPlatformFaultDomainCount": 3,
        "newStorageAccountInfra": "[concat('infra', uniqueString(concat(resourceGroup().id, 'infra')))]",
        "managedInfraUri": "[variables('diagStorageAccount1')]",
        "nodeOsUri": "[concat(parameters('storageKind'), 'NodeOsUri')]",
        "infraUri": "[concat(parameters('storageKind'), 'InfraUri')]",
        "namingInfix": "[toLower(parameters('openshiftClusterPrefix'))]",
        "unmanagedMasterUri": "[variables('newStorageAccountMaster')]",
        "openshiftInfraHostname": "[concat(variables('namingInfix'), '-infra')]",
        "nodeSubnetPrefix": "10.2.0.0/16",
        "platformFaultDomainCount": "[concat(parameters('storageKind'), 'PlatformFaultDomainCount')]",
        "storageLoopCount": "[concat(parameters('storageKind'), 'StorageCount')]",
        "diagStorageAccount1": "[concat('diag1', uniqueString(concat(resourceGroup().id, 'dsa1')))]",
        "apiVersionLinkTemplate": "2015-01-01",
        "newStorageAccountRegistry": "[concat('registry', uniqueString(concat(resourceGroup().id, 'registry')))]",
        "infraLbPublicIpDnsLabel": "[concat('infradns', uniqueString(concat(resourceGroup().id, 'infra')))]",
        "managedNodeOsUri": "[variables('diagStorageAccount1')]",
        "masterLbFrontEndConfigId": "[concat(variables('masterLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
        "unmanagedStorageCount": "[length(variables('newStorageAccountArray'))]",
        "infraPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('infraLbPublicIpDnsLabel'))]",
        "managedStorageCount": 3,
        "managedNodeDataUri": "[variables('diagStorageAccount1')]",
        "infraLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('infraLoadBalancerName'))]",
        "masterSubnetPrefix": "10.1.0.0/16",
        "location": "[resourceGroup().location]",
        "storageSkuObject": {
            "node": {
                "skuTier": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountTier]",
                "skuName": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]"
            },
            "persistent": {
                "skuTier": "Standard",
                "skuName": "Standard_LRS"
            },
            "infra": {
                "skuTier": "[variables('vmSizesMap')[parameters('infraVmSize')].storageAccountTier]",
                "skuName": "[variables('vmSizesMap')[parameters('infraVmSize')].storageAccountType]"
            },
            "master": {
                "skuTier": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountTier]",
                "skuName": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountType]"
            },
            "registry": {
                "skuTier": "Standard",
                "skuName": "Standard_LRS"
            },
            "diagnostics": {
                "skuTier": "Standard",
                "skuName": "Standard_LRS"
            }
        },
        "unmanagedAvailabilitySetSku": "Classic",
        "virtualNetworkName": "openshiftvnet",
        "sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
        "masterLbHttpProbeId": "[concat(variables('masterLbId'),'/probes/httpProbe')]",
        "infraLbFrontEndConfigId": "[concat(variables('infraLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
        "nodeSubnetName": "nodesubnet",
        "openshiftMasterPublicIpDnsLabel": "[concat('masterdns', uniqueString(concat(resourceGroup().id, 'master')))]",
        "unmanagedNodeOsUri": "[variables('newStorageAccountNodeOs')]",
        "defaultSubDomain": "[toLower(parameters('defaultSubDomain'))]",
        "clusterNodeDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/clusternode.json')]",
        "newStorageAccountPersistentVolume1": "[concat('pv1sa', uniqueString(concat(resourceGroup().id, 'persistentvolume1')))]",
        "infraLbBackendPoolId": "[concat(variables('infraLbId'),'/backendAddressPools/loadBalancerBackend')]",
        "masterPrepScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/masterPrep.sh')]",
        "newStorageAccountNodeData": "[concat('nodedata', uniqueString(concat(resourceGroup().id, 'nodedatasa')))]",
        "redHatTags": {
            "platform": "AzurePublic",
            "app": "OpenShiftOrigin",
            "version": "3.9",
            "provider": "9d2c71fc-96ba-4b4a-93b3-14def5bc96fc"
        },
        "masterUri": "[concat(parameters('storageKind'), 'MasterUri')]",
        "nodePrepScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/nodePrep.sh')]",
        "singlequote": "'",
        "infraLoadBalancerName": "[concat(variables('openshiftInfraHostname'), 'lb')]",
        "infraLbHttpsProbeId": "[concat(variables('infraLbId'),'/probes/httpsProbe')]",
        "imageReference": {
            "sku": "7.5",
            "publisher": "Openlogic",
            "version": "latest",
            "offer": "CentOS"
        },
        "newStorageAccountNodeOs": "[concat('nodeos', uniqueString(concat(resourceGroup().id, 'nodeossa')))]",
        "masterPrepScriptFileName": "masterPrep.sh",
        "unmanagedNodeDataUri": "[variables('newStorageAccountNodeData')]",
        "masterLoadBalancerName": "[concat(variables('openshiftMasterHostname'), 'lb')]",
        "masterPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('openshiftMasterPublicIpDnsLabel'))]",
        "openshiftDeploymentTemplateUrl": "[concat(parameters('_artifactsLocation'), '/nested/openshiftdeploy.json')]",
        "nodeDataUri": "[concat(parameters('storageKind'), 'NodeDataUri')]",
        "managedPlatformFaultDomainCount": 2,
        "nodePrepScriptFileName": "nodePrep.sh",
        "newStorageAccountArray": [
            {
                "skuTier": "[variables('storageSkuObject').diagnostics.skuTier]",
                "skuName": "[variables('storageSkuObject').diagnostics.skuName]",
                "name": "[variables('diagStorageAccount1')]",
                "tagName": "DiagnosticsStorageAccount"
            },
            {
                "skuTier": "[variables('storageSkuObject').diagnostics.skuTier]",
                "skuName": "[variables('storageSkuObject').diagnostics.skuName]",
                "name": "[variables('diagStorageAccount2')]",
                "tagName": "DiagnosticsStorageAccount"
            },
            {
                "skuTier": "[variables('storageSkuObject').registry.skuTier]",
                "skuName": "[variables('storageSkuObject').registry.skuName]",
                "name": "[variables('newStorageAccountRegistry')]",
                "tagName": "RegistryStorageAccount"
            },
            {
                "skuTier": "[variables('storageSkuObject').master.skuTier]",
                "skuName": "[variables('storageSkuObject').master.skuName]",
                "name": "[variables('newStorageAccountMaster')]",
                "tagName": "MasterStorageAccount"
            },
            {
                "skuTier": "[variables('storageSkuObject').infra.skuTier]",
                "skuName": "[variables('storageSkuObject').infra.skuName]",
                "name": "[variables('newStorageAccountInfra')]",
                "tagName": "InfraStorageAccount"
            },
            {
                "skuTier": "[variables('storageSkuObject').node.skuTier]",
                "skuName": "[variables('storageSkuObject').node.skuName]",
                "name": "[variables('newStorageAccountNodeOs')]",
                "tagName": "NodeStorageAccount"
            },
            {
                "skuTier": "[variables('storageSkuObject').node.skuTier]",
                "skuName": "[variables('storageSkuObject').node.skuName]",
                "name": "[variables('newStorageAccountNodeData')]",
                "tagName": "NodeStorageAccount"
            },
            {
                "skuTier": "[variables('storageSkuObject').persistent.skuTier]",
                "skuName": "[variables('storageSkuObject').persistent.skuName]",
                "name": "[variables('newStorageAccountPersistentVolume1')]",
                "tagName": "PersistentVolume1StorageAccount"
            }
        ],
        "openshiftDeploymentScriptFileName": "deployOpenShift.sh",
        "managedMasterUri": "[variables('diagStorageAccount1')]",
        "vmSizesMap": {
            "Standard_A6": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_A7": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_A4": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_A5": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E32_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D1_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_DS5_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D14_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_A8": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_A9": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_G1": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_G2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_G3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_G4": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_G5": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D64_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_A10": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_A11": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D8_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D11_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E2_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E32s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D2s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D32s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS12_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS2_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS14_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D4_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D4_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E8s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS15_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D12_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E16s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D8s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D2_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_DS4_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS1": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS1_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS4": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_GS4": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D4": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E8_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D1": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_GS1": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_GS2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_GS3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_E4s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS13_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D64s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D4s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS11_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS12": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D11": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_DS3_v2": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D13": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D12": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D16s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D14": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D13_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_GS5": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D32_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_DS14": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS13": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_E64s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_DS11": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_E4_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D5_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E2s_v3": {
                "storageAccountType": "Premium_LRS",
                "storageAccountTier": "Premium"
            },
            "Standard_D3_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D16_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_D2_v2": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E64_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            },
            "Standard_E16_v3": {
                "storageAccountType": "Standard_LRS",
                "storageAccountTier": "Standard"
            }
        },
        "unmanagedInfraUri": "[variables('newStorageAccountInfra')]",
        "diagStorageAccount2": "[concat('diag2', uniqueString(concat(resourceGroup().id, 'dsa2')))]",
        "openshiftDeploymentScriptUrl": "[concat(parameters('_artifactsLocation'), '/scripts/deployOpenShift.sh')]",
        "openshiftNodeHostname": "[concat(variables('namingInfix'), '-node')]",
        "addressPrefix": "10.0.0.0/8",
        "masterLbHttpsProbeId": "[concat(variables('masterLbId'),'/probes/httpsProbe')]",
        "masterSubnetName": "mastersubnet",
        "availabilitySetArray": [
            {
                "name": "masteravailabilityset",
                "tagName": "MasterAvailabilitySet"
            },
            {
                "name": "infraavailabilityset",
                "tagName": "InfraAvailabilitySet"
            },
            {
                "name": "nodeavailabilityset",
                "tagName": "NodeAvailabilitySet"
            }
        ],
        "managedAvailabilitySetSku": "Aligned"
    },
    "resources": [
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[concat(variables('openshiftMasterHostname'), '-nsg')]",
            "location": "[variables('location')]",
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "MasterNSG",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "allowSSHin_all",
                        "properties": {
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "description": "Allow SSH in from all locations",
                            "priority": 100,
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allowHTTPS_all",
                        "properties": {
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "description": "Allow HTTPS connections from all locations",
                            "priority": 200,
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[concat(variables('openshiftInfraHostname'), '-nsg')]",
            "location": "[variables('location')]",
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "InfraNSG",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "allowSSHin_all",
                        "properties": {
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "description": "Allow SSH in from all locations",
                            "priority": 100,
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allowHTTPSIn_all",
                        "properties": {
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "description": "Allow HTTPS connections from all locations",
                            "priority": 200,
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allowHTTPIn_all",
                        "properties": {
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "description": "Allow HTTP connections from all locations",
                            "priority": 300,
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[concat(variables('openshiftNodeHostname'), '-nsg')]",
            "location": "[variables('location')]",
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "NodeNSG",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "allowSSHin_all",
                        "properties": {
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "description": "Allow SSH in from all locations",
                            "priority": 100,
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allowHTTPS_all",
                        "properties": {
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "description": "Allow HTTPS connections from all locations",
                            "priority": 200,
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "allowHTTPIn_all",
                        "properties": {
                            "access": "Allow",
                            "direction": "Inbound",
                            "protocol": "Tcp",
                            "description": "Allow HTTP connections from all locations",
                            "priority": 300,
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('location')]",
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "VirtualNetwork",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "subnets": [
                    {
                        "name": "[variables('masterSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('masterSubnetPrefix')]"
                        }
                    },
                    {
                        "name": "[variables('nodeSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('nodeSubnetPrefix')]"
                        }
                    }
                ],
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "[variables('apiVersionStorage')]",
            "name": "[variables('newStorageAccountArray')[copyIndex()].name]",
            "location": "[variables('location')]",
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "[variables('newStorageAccountArray')[copyIndex()].tagName]",
                "provider": "[variables('redHatTags').provider]"
            },
            "sku": {
                "tier": "[variables('newStorageAccountArray')[copyIndex()].skuTier]",
                "name": "[variables('newStorageAccountArray')[copyIndex()].skuName]"
            },
            "kind": "Storage",
            "copy": {
                "name": "storageLoop",
                "count": "[variables(variables('storageLoopCount'))]"
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[variables('infraLbPublicIpDnsLabel')]",
            "location": "[variables('location')]",
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "OpenShiftInfraLBPublicIP",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[variables('infraLbPublicIpDnsLabel')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[variables('openshiftMasterPublicIpDnsLabel')]",
            "location": "[variables('location')]",
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "OpenShiftMasterPublicIP",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                    "domainNameLabel": "[variables('openshiftMasterPublicIpDnsLabel')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "[variables('apiVersionCompute')]",
            "name": "[variables('availabilitySetArray')[copyIndex()].name]",
            "location": "[variables('location')]",
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "[variables('availabilitySetArray')[copyIndex()].tagName]",
                "provider": "[variables('redHatTags').provider]"
            },
            "sku": {
                "name": "[variables(variables('availabilitySetSku'))]"
            },
            "properties": {
                "platformFaultDomainCount": "[variables(variables('platformFaultDomainCount'))]",
                "platformUpdateDomainCount": "5"
            },
            "copy": {
                "name": "availabiltySetLoop",
                "count": "[length(variables('availabilitySetArray'))]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[variables('masterLoadBalancerName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('openshiftMasterPublicIpDnsLabel'))]"
            ],
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "OpenShiftMasterLB",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('masterPublicIpAddressId')]"
                            }
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "OpenShiftAdminConsole",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('masterLbFrontEndConfigId')]"
                            },
                            "protocol": "Tcp",
                            "backendPort": 443,
                            "probe": {
                                "id": "[variables('masterLbHttpsProbeId')]"
                            },
                            "idleTimeoutInMinutes": 30,
                            "backendAddressPool": {
                                "id": "[variables('masterLbBackendPoolId')]"
                            },
                            "frontendPort": 443,
                            "loadDistribution": "SourceIP"
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "probes": [
                    {
                        "name": "httpsProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "numberOfProbes": 2,
                            "intervalInSeconds": 5,
                            "port": 443
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers/inboundNatRules",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[concat(variables('masterLoadBalancerName'), '/', 'SSH-', variables('openshiftMasterHostname'), copyIndex())]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[variables('masterLbId')]"
            ],
            "properties": {
                "enableFloatingIP": false,
                "backendPort": 22,
                "frontendIPConfiguration": {
                    "id": "[variables('masterLbFrontEndConfigId')]"
                },
                "protocol": "tcp",
                "frontendPort": "[copyIndex(2200)]"
            },
            "copy": {
                "name": "masterLbLoop",
                "count": "[parameters('masterInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[variables('infraLoadBalancerName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('infraLbPublicIpDnsLabel'))]"
            ],
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "OpenShiftInfraLB",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('infraPublicIpAddressId')]"
                            }
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "OpenShiftRouterHTTP",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('infraLbFrontEndConfigId')]"
                            },
                            "protocol": "Tcp",
                            "backendPort": 80,
                            "probe": {
                                "id": "[variables('infraLbHttpProbeId')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('infraLbBackendPoolId')]"
                            },
                            "frontendPort": 80
                        }
                    },
                    {
                        "name": "OpenShiftRouterHTTPS",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('infraLbFrontEndConfigId')]"
                            },
                            "protocol": "Tcp",
                            "backendPort": 443,
                            "probe": {
                                "id": "[variables('infraLbHttpsProbeId')]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('infraLbBackendPoolId')]"
                            },
                            "frontendPort": 443
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ],
                "probes": [
                    {
                        "name": "httpProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "numberOfProbes": 2,
                            "intervalInSeconds": 5,
                            "port": 80
                        }
                    },
                    {
                        "name": "httpsProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "numberOfProbes": 2,
                            "intervalInSeconds": 5,
                            "port": 443
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '-nic')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'))]",
                "[concat(variables('masterLbId'), '/inboundNatRules/SSH-', variables('openshiftMasterHostname') ,copyIndex())]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftMasterHostname'), '-nsg')]"
            ],
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "OpenShiftMasterNetworkInterface",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftMasterHostname'), '-nsg'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('openshiftMasterHostname'), copyIndex(), 'ipconfig')]",
                        "properties": {
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('masterLbId'),'/inboundNatRules/SSH-', variables('openshiftMasterHostname'), copyIndex())]"
                                }
                            ],
                            "subnet": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('masterLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "copy": {
                "name": "masterNicLoop",
                "count": "[parameters('masterInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '-nic')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('infraLoadBalancerName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftInfraHostname'), '-nsg')]"
            ],
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "OpenShiftInfraNetworkInterfaces",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftInfraHostname'), '-nsg'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('openshiftInfraHostname'), copyIndex(), 'ipconfig')]",
                        "properties": {
                            "subnet": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('infraLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
                                }
                            ]
                        }
                    }
                ]
            },
            "copy": {
                "name": "infraNicLoop",
                "count": "[parameters('infraInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "[variables('apiVersionNetwork')]",
            "name": "[concat(variables('openshiftNodeHostname'), '-', copyIndex(), '-nic')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('openshiftNodeHostname'), '-nsg')]"
            ],
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "OpenShiftNodeNetworkInterfaces",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('openshiftNodeHostname'), '-nsg'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('openshiftNodeHostname'), copyIndex(), 'ipconfig')]",
                        "properties": {
                            "subnet": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('nodeSubnetName'))]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ]
            },
            "copy": {
                "name": "nodeNicLoop",
                "count": "[parameters('nodeInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersionLinkTemplate')]",
            "name": "[concat('masterVmDeployment', copyindex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount1'))]",
                "masterNicLoop",
                "masteravailabilityset"
            ],
            "properties": {
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('clusterNodeDeploymentTemplateUrl')]"
                },
                "mode": "Incremental",
                "parameters": {
                    "hostname": {
                        "value": "[concat(variables('openshiftMasterHostname'), '-', copyIndex())]"
                    },
                    "apiVersionCompute": {
                        "value": "[variables('apiVersionCompute')]"
                    },
                    "apiVersionStorage": {
                        "value": "[variables('apiVersionStorage')]"
                    },
                    "vmStorageType": {
                        "value": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountType]"
                    },
                    "redHatTags": {
                        "value": "[variables('redHatTags')]"
                    },
                    "sshPublicKey": {
                        "value": "[parameters('sshPublicKey')]"
                    },
                    "unmanagedDataDiskUri": {
                        "value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('masterUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
                    },
                    "newStorageAccountOs": {
                        "value": "[variables('newStorageAccountMaster')]"
                    },
                    "storageKind": {
                        "value": "[parameters('storageKind')]"
                    },
                    "unmanagedOsDiskUri": {
                        "value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('masterUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "diagStorageAccount": {
                        "value": "[variables('diagStorageAccount1')]"
                    },
                    "availabilitySet": {
                        "value": "masteravailabilityset"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "imageReference": {
                        "value": "[variables('imageReference')]"
                    },
                    "role": {
                        "value": "masternode"
                    },
                    "newStorageAccountData": {
                        "value": "[variables('newStorageAccountMaster')]"
                    },
                    "sshKeyPath": {
                        "value": "[variables('sshKeyPath')]"
                    },
                    "vmSize": {
                        "value": "[parameters('masterVmSize')]"
                    },
                    "dataDiskSize": {
                        "value": "[parameters('dataDiskSize')]"
                    }
                }
            },
            "copy": {
                "name": "masterVmLoop",
                "count": "[parameters('masterInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersionLinkTemplate')]",
            "name": "[concat('infraVmDeployment', copyindex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount1'))]",
                "infraNicLoop",
                "infraavailabilityset"
            ],
            "properties": {
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('clusterNodeDeploymentTemplateUrl')]"
                },
                "mode": "Incremental",
                "parameters": {
                    "hostname": {
                        "value": "[concat(variables('openshiftInfraHostname'), '-', copyIndex())]"
                    },
                    "apiVersionCompute": {
                        "value": "[variables('apiVersionCompute')]"
                    },
                    "apiVersionStorage": {
                        "value": "[variables('apiVersionStorage')]"
                    },
                    "vmStorageType": {
                        "value": "[variables('vmSizesMap')[parameters('infraVmSize')].storageAccountType]"
                    },
                    "redHatTags": {
                        "value": "[variables('redHatTags')]"
                    },
                    "sshPublicKey": {
                        "value": "[parameters('sshPublicKey')]"
                    },
                    "unmanagedDataDiskUri": {
                        "value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('infraUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
                    },
                    "newStorageAccountOs": {
                        "value": "[variables('newStorageAccountInfra')]"
                    },
                    "storageKind": {
                        "value": "[parameters('storageKind')]"
                    },
                    "unmanagedOsDiskUri": {
                        "value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('infraUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "diagStorageAccount": {
                        "value": "[variables('diagStorageAccount1')]"
                    },
                    "availabilitySet": {
                        "value": "infraavailabilityset"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "imageReference": {
                        "value": "[variables('imageReference')]"
                    },
                    "role": {
                        "value": "infranode"
                    },
                    "newStorageAccountData": {
                        "value": "[variables('newStorageAccountInfra')]"
                    },
                    "sshKeyPath": {
                        "value": "[variables('sshKeyPath')]"
                    },
                    "vmSize": {
                        "value": "[parameters('infraVmSize')]"
                    },
                    "dataDiskSize": {
                        "value": "[parameters('dataDiskSize')]"
                    }
                }
            },
            "copy": {
                "name": "infraVmLoop",
                "count": "[parameters('infraInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersionLinkTemplate')]",
            "name": "[concat('nodeVmDeployment', copyindex())]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('diagStorageAccount2'))]",
                "nodeNicLoop",
                "nodeavailabilityset"
            ],
            "properties": {
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('clusterNodeDeploymentTemplateUrl')]"
                },
                "mode": "Incremental",
                "parameters": {
                    "hostname": {
                        "value": "[concat(variables('openshiftNodeHostname'), '-', copyIndex())]"
                    },
                    "apiVersionCompute": {
                        "value": "[variables('apiVersionCompute')]"
                    },
                    "apiVersionStorage": {
                        "value": "[variables('apiVersionStorage')]"
                    },
                    "vmStorageType": {
                        "value": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]"
                    },
                    "redHatTags": {
                        "value": "[variables('redHatTags')]"
                    },
                    "sshPublicKey": {
                        "value": "[parameters('sshPublicKey')]"
                    },
                    "unmanagedDataDiskUri": {
                        "value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('nodeDataUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
                    },
                    "newStorageAccountOs": {
                        "value": "[variables('newStorageAccountNodeOs')]"
                    },
                    "storageKind": {
                        "value": "[parameters('storageKind')]"
                    },
                    "unmanagedOsDiskUri": {
                        "value": "[reference(resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables(variables('nodeOsUri'))), variables('apiVersionStorage')).primaryEndpoints['blob']]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "diagStorageAccount": {
                        "value": "[variables('diagStorageAccount2')]"
                    },
                    "availabilitySet": {
                        "value": "nodeavailabilityset"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "imageReference": {
                        "value": "[variables('imageReference')]"
                    },
                    "role": {
                        "value": "appnode"
                    },
                    "newStorageAccountData": {
                        "value": "[variables('newStorageAccountNodeData')]"
                    },
                    "sshKeyPath": {
                        "value": "[variables('sshKeyPath')]"
                    },
                    "vmSize": {
                        "value": "[parameters('nodeVmSize')]"
                    },
                    "dataDiskSize": {
                        "value": "[parameters('dataDiskSize')]"
                    }
                }
            },
            "copy": {
                "name": "nodeVmLoop",
                "count": "[parameters('nodeInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "[variables('apiVersionCompute')]",
            "name": "[concat(variables('openshiftMasterHostname'), '-', copyIndex(), '/deployOpenShift')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('masterVmDeployment', copyindex())]"
            ],
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "PrepMaster",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": [
                        "[variables('masterPrepScriptUrl')]"
                    ]
                },
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat('bash ', variables('masterPrepScriptFileName'), ' ', variables('newStorageAccountPersistentVolume1'), ' ', parameters('adminUsername'), ' ', variables('location'))]"
                },
                "type": "CustomScript"
            },
            "copy": {
                "name": "masterPrepLoop",
                "count": "[parameters('masterInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "[variables('apiVersionCompute')]",
            "name": "[concat(variables('openshiftInfraHostname'), '-', copyIndex(), '/prepNodes')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('infraVmDeployment', copyindex())]"
            ],
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "PrepInfra",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": [
                        "[variables('nodePrepScriptUrl')]"
                    ]
                },
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
                },
                "type": "CustomScript"
            },
            "copy": {
                "name": "infraPrepLoop",
                "count": "[parameters('infraInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "[variables('apiVersionCompute')]",
            "name": "[concat(variables('openshiftNodeHostname'), '-', copyIndex(), '/prepNodes')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('nodeVmDeployment', copyindex())]"
            ],
            "tags": {
                "platform": "[variables('redHatTags').platform]",
                "app": "[variables('redHatTags').app]",
                "version": "[variables('redHatTags').version]",
                "displayName": "PrepNodes",
                "provider": "[variables('redHatTags').provider]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "settings": {
                    "fileUris": [
                        "[variables('nodePrepScriptUrl')]"
                    ]
                },
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                    "commandToExecute": "[concat('bash ', variables('nodePrepScriptFileName'))]"
                },
                "type": "CustomScript"
            },
            "copy": {
                "name": "nodePrepLoop",
                "count": "[parameters('nodeInstanceCount')]"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersionLinkTemplate')]",
            "name": "OpenShiftDeployment",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountRegistry'))]",
                "masterPrepLoop",
                "infraPrepLoop",
                "nodePrepLoop"
            ],
            "properties": {
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('openshiftDeploymentTemplateUrl')]"
                },
                "mode": "Incremental",
                "parameters": {
                    "infraInstanceCount": {
                        "value": "[parameters('infraInstanceCount')]"
                    },
                    "newStorageAccountRegistry": {
                        "value": "[variables('newStorageAccountRegistry')]"
                    },
                    "customDomain": {
                        "value": "[variables('defaultSubDomain')]"
                    },
                    "enableLogging": {
                        "value": "[parameters('enableLogging')]"
                    },
                    "openshiftPassword": {
                        "value": "[parameters('openshiftPassword')]"
                    },
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "openshiftInfraHostname": {
                        "value": "[variables('openshiftInfraHostname')]"
                    },
                    "aadClientSecret": {
                        "value": "[parameters('aadClientSecret')]"
                    },
                    "apiVersionCompute": {
                        "value": "[variables('apiVersionCompute')]"
                    },
                    "enableMetrics": {
                        "value": "[parameters('enableMetrics')]"
                    },
                    "nipioDomain": {
                        "value": "[concat(reference(variables('infraLbPublicIpDnsLabel')).ipAddress, '.nip.io')]"
                    },
                    "redHatTags": {
                        "value": "[variables('redHatTags')]"
                    },
                    "openshiftMasterPublicIpAddress": {
                        "value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).ipAddress]"
                    },
                    "openshiftNodeHostname": {
                        "value": "[variables('openshiftNodeHostname')]"
                    },
                    "openshiftMasterHostname": {
                        "value": "[variables('openshiftMasterHostname')]"
                    },
                    "nodeInstanceCount": {
                        "value": "[parameters('nodeInstanceCount')]"
                    },
                    "subDomainChosen": {
                        "value": "[concat(parameters('defaultSubDomainType'), 'Domain')]"
                    },
                    "aadClientId": {
                        "value": "[parameters('aadClientId')]"
                    },
                    "storageKind": {
                        "value": "[parameters('storageKind')]"
                    },
                    "openshiftDeploymentScriptFileName": {
                        "value": "[variables('openshiftDeploymentScriptFileName')]"
                    },
                    "newStorageAccountKey": {
                        "value": "[listKeys(variables('newStorageAccountRegistry'), variables('apiVersionStorage')).keys[0].value]"
                    },
                    "sshPrivateKey": {
                        "reference": {
                            "keyvault": {
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
                            },
                            "secretName": "[parameters('keyVaultSecret')]"
                        }
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "enableAzure": {
                        "value": "[parameters('enableAzure')]"
                    },
                    "openshiftMasterPublicIpFqdn": {
                        "value": "[reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn]"
                    },
                    "masterInstanceCount": {
                        "value": "[parameters('masterInstanceCount')]"
                    },
                    "openshiftDeploymentScriptUrl": {
                        "value": "[variables('openshiftDeploymentScriptUrl')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "OpenShift Master SSH": {
            "type": "String",
            "value": "[concat('ssh -p 2200 ', parameters('adminUsername'), '@', reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn)]"
        },
        "OpenShift Console Url": {
            "type": "String",
            "value": "[concat('https://', reference(variables('openshiftMasterPublicIpDnsLabel')).dnsSettings.fqdn, '/console')]"
        },
        "OpenShift Infra Load Balancer FQDN": {
            "type": "String",
            "value": "[reference(variables('infraLbPublicIpDnsLabel')).dnsSettings.fqdn]"
        }
    }
}